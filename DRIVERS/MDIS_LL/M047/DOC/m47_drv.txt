Function Description
====================
Tue Apr 29 12:42:39  2003
 
Overview of all Functions
-------------------------

M47_GetEntry           - Initialize driver's jump table 
M47_Init               - Allocate and return low-level handle, initialize hardware 
M47_Exit               - De-initialize hardware and clean up memory 
M47_Read               - Read a value from the device 
M47_Write              - Do nothing 
M47_SetStat            - Set the driver status 
M47_GetStat            - Get the driver status 
M47_BlockRead          - Read a data block (values of channels 0..3) from the device. 
M47_BlockWrite         - Do nothing 
M47_Irq                - Do nothing 
M47_Info               - Get information about hardware and driver requirements 
 

Function M47_GetEntry()
-----------------------

Syntax:
    #ifdef _ONE_NAMESPACE_PER_DRIVER_
        extern void LL_GetEntry( LL_ENTRY* drvP )
    #else
    # ifndef MAC_BYTESWAP
        extern void M47_GetEntry( LL_ENTRY* drvP )
    # else
        extern void M47_SW_GetEntry( LL_ENTRY* drvP )
    # endif /* MAC_BYTESWAP */
    #endif

Description:
    Initialize driver's jump table

Input:
    ---

Output:
    drvP  pointer to the initialized jump table structure


Function M47_Init()
-------------------

Syntax:
    static int32 M47_Init(
        DESC_SPEC       *descP,
        OSS_HANDLE      *osHdl,
        MACCESS         *ma,
        OSS_SEM_HANDLE  *devSemHdl,
        OSS_IRQ_HANDLE  *irqHdl,
        LL_HANDLE       **llHdlP
    )

Description:
    Allocate and return low-level handle, initialize hardware

    The function initializes all channels with the 
    definitions made in the descriptor. The interrupt 
    is always disabled.

    The following descriptor keys are used:

    Descriptor key        Default          Range
    --------------------  ---------------  -------------
    DEBUG_LEVEL_DESC      OSS_DBG_DEFAULT  see dbg.h
    DEBUG_LEVEL           OSS_DBG_DEFAULT  see dbg.h
    ID_CHECK              1                0..1
    M47_CONTROL           0x00000080       see below
    M47_TRANSMODE         0x00000000       0x00000000 (Gray)
                                           0x00000080 (binary)

    M47_CONTROL sets the baud rate and number of bits in
        a data word:

        Bit       31..8         7..2      1..0
             +----------------------------------+ 
             | 0   ...   0 |     BW    |   BR   |
             +----------------------------------+

        BW: number of bits in data word (bit width), 1..32
            0 0 0 0 0 0 = stop transmission
            0 0 0 0 0 1 = 1 bit in data word
            ..
            1 0 0 0 0 0 = 32 bits in data word
            Other values are not permitted!

        BR: 0 0 = 500 kbaud
            0 1 = 250 kbaud
            1 0 = 125 kbaud
            1 1 = 62.5 kbaud

Input:
    descSpec   pointer to descriptor data
    osHdl      oss handle
    ma         hw access handle
    devSemHdl  device semaphore handle
    irqHdl     irq handle

Output:
    llHdlP     pointer to low-level driver handle
    return     success (0) or error code


Function M47_Exit()
-------------------

Syntax:
    static int32 M47_Exit(
       LL_HANDLE    **llHdlP
    )

Description:
    De-initialize hardware and clean up memory

    The function stops the transmission by setting the data
    width to 0 (i.e. it writes 0x0000 to the Control Register).
    The interrupt is disabled.

Input:
    llHdlP    pointer to low-level driver handle

Output:
    return    success (0) or error code


Function M47_Read()
-------------------

Syntax:
    static int32 M47_Read(
        LL_HANDLE *llHdl,
        int32 ch,
        int32 *valueP
    )

Description:
    Read a value from the device

    The function reads the input state of the current channel.
    The routine writes it's read value into a variable of 
    type unsigned long. The bits beginning from the least 
    significant bit up to the maximum number of bits (defined
    by the data width) are valid.

    Bit  32 ...      max ...                 0
        +-------------------------------------+
        |  reserved  |     valid data         |
        +-------------------------------------+

Input:
    llHdl    low-level handle
    ch       current channel

Output:
    valueP   read value
    return   success (0) or error code


Function M47_Write()
--------------------

Syntax:
    static int32 M47_Write(
        LL_HANDLE *llHdl,
        int32 ch,
        int32 value
    )

Description:
    Do nothing

Input:
    llHdl    low-level handle
    ch       current channel
    value    value to write 

Output:
    return   error code


Function M47_SetStat()
----------------------

Syntax:
    static int32 M47_SetStat(
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        INT32_OR_64 value32_or_64
    )

Description:
    Set the driver status

    The following status codes are supported:

    Code                 Description                 Values
    -------------------  --------------------------  ----------
    M_LL_DEBUG_LEVEL     driver debug level          see dbg.h
    M_MK_IRQ_ENABLE      interrupt enable            0..1
    M_LL_IRQ_COUNT       interrupt counter           0..max
    M_LL_CH_DIR          direction of curr. chan.    M_CH_???
    M47_BAUDRATE         baud rate for SSI device    0..3
    M47_DATA_WIDTH       data width                  0..32
    M47_TRANS_MODE       transmission mode           0 (Gray) 
                                                     1 (binary)

    M47_BAUDRATE sets the baud rate for the SSI device:
        0 = 500 kbaud
        1 = 250 kbaud
        2 = 125 kbaud
        3 = 62.5 kbaud
        (see also m47_drv.h #define M47_BAUD_XXX)

    The following codes are only valid in conjunction with M47
    HW revision 2.0 or higher!

    M47_BAUDRATE_CH      baudrate for specific CH    see 
                                                     M47_BAUDRATE
    M47_DATA_WIDTH_CH    data width for specific CH  0..32
    M47_TRANS_MODE_CH    trans. mode for spceific CH 0 (Gray) 
                                                     1 (binary)

Input:
    llHdl           low-level handle
    code            status code
    ch              current channel
    value32_or_64   data or
                    pointer to block data structure (M_SG_BLOCK)(*)
                    (*) = for block status codes

Output:
    return          success (0) or error code


Function M47_GetStat()
----------------------

Syntax:
    static int32 M47_GetStat(
        LL_HANDLE *llHdl,
        int32  code,
        int32  ch,
        INT32_OR_64 *value32_or_64P
    )

Description:
    Get the driver status

    The following status codes are supported:

    Code                 Description                 Values
    -------------------  --------------------------  ----------
    M_LL_DEBUG_LEVEL     driver debug level          see dbg.h
    M_LL_CH_NUMBER       number of channels          0..4
    M_LL_CH_DIR          direction of curr. chan.    M_CH_???
    M_LL_CH_LEN          length of curr. ch. [bits]  1..max
    M_LL_CH_TYP          description of curr. chan.  M_CH_???
    M_LL_IRQ_COUNT       interrupt counter           0..max
    M_LL_ID_CHECK        ID is checked               0..1
    M_LL_ID_SIZE         EEPROM size [bytes]         128
    M_LL_BLK_ID_DATA     EEPROM raw data             -
    M_MK_BLK_REV_ID      ident function table ptr    -
    M47_CHECK_CONNECT    check sensor connection     see below
    M47_BAUDRATE         baudrate for transmission   0..3 
    M47_DATA_WIDTH       width of data word          0..32
    M47_TRANS_MODE       transmission mode           0 (Gray) 
                                                     1 (binary)
    M47_PLD_REV          PLD revision number         0..max

    M47_CHECK_CONNECT checks the sensor connection:
        Bit      7..4        3..0
            +------------------------+ 
            |     RES    |TD|TC|TB|TA|
            +------------------------+
        RES: reserved
        TD = 1: channel D is transferring data
        TC = 1: channel C is transferring data
        TB = 1: channel B is transferring data
        TA = 1: channel A is transferring data

    M47_BAUDRATE gets the baud rate for transmission:
        0 = 500 kbaud
        1 = 250 kbaud
        2 = 125 kbaud
        3 = 62.5 kbaud
       (see m47_drv.h)

    M47_HW_REV           HW Revision of module       0..max  

    The following codes are only valid in conjunction with M47
    HW revision 2.0 or higher!

    M47_BAUDRATE_CH      baudrate for specific CH    see 
                                                     M47_BAUDRATE
    M47_DATA_WIDTH_CH    data width for specific CH  0..32
    M47_TRANS_MODE_CH    trans. mode for spceific CH 0 (Gray) 
                                                     1 (binary)

Input:
    llHdl             low-level handle
    code              status code
    ch                current channel
    value32_or_64P    pointer to block data structure (M_SG_BLOCK)(*) 
                      (*) = for block status codes

Output:
    value32_or_64P    data pointer or
                      pointer to block data structure (M_SG_BLOCK)(*) 
    return            success (0) or error code
                      (*) = for block status codes


Function M47_BlockRead()
------------------------

Syntax:
    static int32 M47_BlockRead(
         LL_HANDLE *llHdl,
         int32     ch,
         void      *buf,
         int32     size,
         int32     *nbrRdBytesP
    )

Description:
    Read a data block (values of channels 0..3) from the device.
    The variable buf must be a pointer to unsigned long (u_int32)
    array with space for 4 values. The location of data in the
    buffer is shown below.

        buf[0]      buf[1]       buf[2]       buf[3]
    +-------------------------------------------------+
    |   value   |    value   |    value   |   value   |
    | channel 0 |  channel 1 |  channel 2 | channel 3 |
    +-------------------------------------------------+

Input:
    llHdl        low-level handle
    ch           current channel
    buf          data buffer
    size         data buffer size

Output:
    nbrRdBytesP  number of read bytes
    return       success (0) or error code


Function M47_BlockWrite()
-------------------------

Syntax:
    static int32 M47_BlockWrite(
         LL_HANDLE *llHdl,
         int32     ch,
         void      *buf,
         int32     size,
         int32     *nbrWrBytesP
    )

Description:
    Do nothing

Input:
    llHdl        low-level handle
    ch           current channel
    buf          data buffer
    size         data buffer size

Output:
    nbrWrBytesP  number of written bytes
    return       error code


Function M47_Irq()
------------------

Syntax:
    static int32 M47_Irq(
       LL_HANDLE *llHdl
    )

Description:
    Do nothing
    The function returns LL_IRQ_UNKNOWN, because no interrupts
    are used in this driver.

Input:
    llHdl    low-level handle

Output:
    return   LL_IRQ_UNKNOWN   unknown


Function M47_Info()
-------------------

Syntax:
    static int32 M47_Info(
       int32  infoType,
       ...
    )

Description:
    Get information about hardware and driver requirements

    The following info codes are supported:

    Code                      Description
    ------------------------  -----------------------------
    LL_INFO_HW_CHARACTER      hardware characteristics
    LL_INFO_ADDRSPACE_COUNT   nr of required address spaces
    LL_INFO_ADDRSPACE         address space information
    LL_INFO_IRQ               interrupt required
    LL_INFO_LOCKMODE          process lock mode required

    The LL_INFO_HW_CHARACTER code returns all address and 
    data modes (ORed) which are supported by the hardware
    (MDIS_MAxx, MDIS_MDxx).

    The LL_INFO_ADDRSPACE_COUNT code returns the number
    of address spaces used by the driver.

    The LL_INFO_ADDRSPACE code returns information about one
    specific address space (MDIS_MAxx, MDIS_MDxx). The returned 
    data mode represents the widest hardware access used by 
    the driver.

    The LL_INFO_IRQ code returns whether the driver supports an
    interrupt routine (TRUE or FALSE).

    The LL_INFO_LOCKMODE code returns which process locking
    mode the driver needs (LL_LOCK_xxx).

Input:
    infoType     info code
    ...          argument(s)

Output:
    return       success (0) or error code

